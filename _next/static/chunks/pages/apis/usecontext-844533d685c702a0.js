(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[798],{1138:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/apis/usecontext",function(){return t(3230)}])},9027:function(e,n,t){"use strict";t.d(n,{Z:function(){return c}});var a=t(5893),o=(t(7294),t(1387)),r=t(8546),i=t(9557);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"===typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){s(e,n,t[n])}))}return e}function c(e){var n=function(n){return(0,a.jsx)(r.$,l({},n,{meta:e}))};return n.appShell=p,n}function p(e){return(0,a.jsx)(i.T,l({routeTree:o},e))}},3230:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return k}});t(7294);var a=t(3905),o=t(9027);function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",Object.assign({},n))}},s=i("Intro"),l=i("CodeStep"),c=i("Gotcha"),p=i("Sandpack"),u=i("Recipes"),d=i("Solution"),m={},h=(0,o.Z)({title:"useContext"});function k(e){var n=e.components,t=r(e,["components"]);return(0,a.kt)(h,Object.assign({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)(s,{mdxType:"Intro"},(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useContext")," is a React Hook that lets you read and subscribe to ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/learn/passing-data-deeply-with-context"}),"context")," from your component."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const value = useContext(SomeContext)\n"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",Object.assign({parentName:"li"},{href:"#usage"}),"Usage"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",Object.assign({parentName:"li"},{href:"#passing-data-deeply-into-the-tree"}),"Passing data deeply into the tree")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",Object.assign({parentName:"li"},{href:"#updating-data-passed-via-context"}),"Updating data passed via context")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",Object.assign({parentName:"li"},{href:"#specifying-a-fallback-default-value"}),"Specifying a fallback default value")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",Object.assign({parentName:"li"},{href:"#overriding-context-for-a-part-of-the-tree"}),"Overriding context for a part of the tree")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",Object.assign({parentName:"li"},{href:"#optimizing-re-renders-when-passing-objects-and-functions"}),"Optimizing re-renders when passing objects and functions")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",Object.assign({parentName:"li"},{href:"#reference"}),"Reference"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",Object.assign({parentName:"li"},{href:"#usecontext"}),(0,a.kt)("inlineCode",{parentName:"a"},"useContext(SomeContext)"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",Object.assign({parentName:"li"},{href:"#troubleshooting"}),"Troubleshooting"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",Object.assign({parentName:"li"},{href:"#my-component-doesnt-see-the-value-from-my-provider"}),"My component doesn\u2019t see the value from my provider")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",Object.assign({parentName:"li"},{href:"#i-am-always-getting-undefined-from-my-context-although-the-default-value-is-different"}),"I am always getting undefined from my context although the default value is different"))))),(0,a.kt)("h2",Object.assign({},{id:"usage"}),"Usage"),(0,a.kt)("h3",Object.assign({},{id:"passing-data-deeply-into-the-tree"}),"Passing data deeply into the tree"),(0,a.kt)("p",null,"Call ",(0,a.kt)("inlineCode",{parentName:"p"},"useContext")," at the top level of your component to read and subscribe to ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/learn/passing-data-deeply-with-context"}),"context"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:'[[2, 4, "theme"], [1, 4, "ThemeContext"]]',"[[2,":!0,"4,":!0,'"theme"],':!0,"[1,":!0,'"ThemeContext"]]':!0}),"import { useContext } from 'react';\n\nfunction Button() {\n  const theme = useContext(ThemeContext);\n  // ... \n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useContext")," returns the ",(0,a.kt)(l,{step:2,mdxType:"CodeStep"},"context value")," for the ",(0,a.kt)(l,{step:1,mdxType:"CodeStep"},"context")," you passed. To determine the context value, React searches the component tree and finds ",(0,a.kt)("strong",{parentName:"p"},"the closest context provider above")," for that particular context."),(0,a.kt)("p",null,"To pass context to a ",(0,a.kt)("inlineCode",{parentName:"p"},"Button"),", wrap it or one of its parent components into the corresponding context provider:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:'[[1, 3, "ThemeContext"], [2, 3, "\\"dark\\""], [1, 5, "ThemeContext"]]',"[[1,":!0,"3,":!0,'"ThemeContext"],':!0,"[2,":!0,'"\\"dark\\""],':!0,"[1,":!0,"5,":!0,'"ThemeContext"]]':!0}),'function MyPage() {\n  return (\n    <ThemeContext.Provider value="dark">\n      <Form />\n    </ThemeContext.Provider>\n  );\n}\n\nfunction Form() {\n  // ... renders buttons inside ...\n}\n')),(0,a.kt)("p",null,"It doesn\u2019t matter how many layers of components there are between the provider and the ",(0,a.kt)("inlineCode",{parentName:"p"},"Button"),". When a ",(0,a.kt)("inlineCode",{parentName:"p"},"Button")," ",(0,a.kt)("em",{parentName:"p"},"anywhere")," inside of ",(0,a.kt)("inlineCode",{parentName:"p"},"Form")," calls ",(0,a.kt)("inlineCode",{parentName:"p"},"useContext(ThemeContext)"),", it will receive ",(0,a.kt)("inlineCode",{parentName:"p"},'"dark"')," as the value."),(0,a.kt)(c,{mdxType:"Gotcha"},(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useContext()")," always looks for the closest provider ",(0,a.kt)("em",{parentName:"p"},"above")," the component that calls it. It searches upwards and ",(0,a.kt)("strong",{parentName:"p"},"does not")," consider providers in the component from which you\u2019re calling ",(0,a.kt)("inlineCode",{parentName:"p"},"useContext()"),".")),(0,a.kt)(p,{mdxType:"Sandpack"},(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { createContext, useContext } from 'react';\n\nconst ThemeContext = createContext(null);\n\nexport default function MyApp() {\n  return (\n    <ThemeContext.Provider value=\"dark\">\n      <Form />\n    </ThemeContext.Provider>\n  )\n}\n\nfunction Form() {\n  return (\n    <Panel title=\"Welcome\">\n      <Button>Sign up</Button>\n      <Button>Log in</Button>\n    </Panel>\n  );\n}\n\nfunction Panel({ title, children }) {\n  const theme = useContext(ThemeContext);\n  const className = 'panel-' + theme;\n  return (\n    <section className={className}>\n      <h1>{title}</h1>\n      {children}\n    </section>\n  )\n}\n\nfunction Button({ children }) {\n  const theme = useContext(ThemeContext);\n  const className = 'button-' + theme;\n  return (\n    <button className={className}>\n      {children}\n    </button>\n  );\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),".panel-light,\n.panel-dark {\n  border: 1px solid black;\n  border-radius: 4px;\n  padding: 20px;\n}\n.panel-light {\n  color: #222;\n  background: #fff;\n}\n\n.panel-dark {\n  color: #fff;\n  background: rgb(23, 32, 42);\n}\n\n.button-light,\n.button-dark {\n  border: 1px solid #777;\n  padding: 5px;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n\n.button-dark {\n  background: #222;\n  color: #fff;\n}\n\n.button-light {\n  background: #fff;\n  color: #222;\n}\n"))),(0,a.kt)("hr",null),(0,a.kt)("h3",Object.assign({},{id:"updating-data-passed-via-context"}),"Updating data passed via context"),(0,a.kt)("p",null,"Often, you\u2019ll want the context to change over time. To update context, you need to combine it with ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/apis/usestate"}),"state"),". Declare a state variable in the parent component, and pass the current state down as the ",(0,a.kt)(l,{step:2,mdxType:"CodeStep"},"context value")," to the provider."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:'{2} [[1, 4, "ThemeContext"], [2, 4, "theme"], [1, 11, "ThemeContext"]]',"{2}":!0,"[[1,":!0,"4,":!0,'"ThemeContext"],':!0,"[2,":!0,'"theme"],':!0,"[1,":!0,"11,":!0,'"ThemeContext"]]':!0}),"function MyPage() {\n  const [theme, setTheme] = useState('dark');\n  return (\n    <ThemeContext.Provider value={theme}>\n      <Form />\n      <Button onClick={() => {\n        setTheme('light');\n      }}>\n        Switch to light theme\n      </Button>\n    </ThemeContext.Provider>\n  );\n}\n")),(0,a.kt)("p",null,"Now any ",(0,a.kt)("inlineCode",{parentName:"p"},"Button")," inside of the provider will receive the current ",(0,a.kt)("inlineCode",{parentName:"p"},"theme")," value. If you call ",(0,a.kt)("inlineCode",{parentName:"p"},"setTheme")," to update the ",(0,a.kt)("inlineCode",{parentName:"p"},"theme")," value that you pass to the provider, all ",(0,a.kt)("inlineCode",{parentName:"p"},"Button")," components will re-render with the new ",(0,a.kt)("inlineCode",{parentName:"p"},"'light'")," value."),(0,a.kt)(u,{titleText:"Examples of updating context",titleId:"examples-basic",mdxType:"Recipes"},(0,a.kt)("h3",Object.assign({},{id:"updating-a-value-via-context"}),"Updating a value via context"),(0,a.kt)("p",null,"In this example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"MyApp")," component holds a state variable which is then passed to the ",(0,a.kt)("inlineCode",{parentName:"p"},"ThemeContext")," provider. Checking the \u201cDark mode\u201d checkbox updates the state. Changing the provided value re-renders all the components using that context."),(0,a.kt)(p,{mdxType:"Sandpack"},(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { createContext, useContext, useState } from 'react';\n\nconst ThemeContext = createContext(null);\n\nexport default function MyApp() {\n  const [theme, setTheme] = useState('light');\n  return (\n    <ThemeContext.Provider value={theme}>\n      <Form />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={theme === 'dark'}\n          onChange={(e) => {\n            setTheme(e.target.checked ? 'dark' : 'light')\n          }}\n        />\n        Use dark mode\n      </label>\n    </ThemeContext.Provider>\n  )\n}\n\nfunction Form({ children }) {\n  return (\n    <Panel title=\"Welcome\">\n      <Button>Sign up</Button>\n      <Button>Log in</Button>\n    </Panel>\n  );\n}\n\nfunction Panel({ title, children }) {\n  const theme = useContext(ThemeContext);\n  const className = 'panel-' + theme;\n  return (\n    <section className={className}>\n      <h1>{title}</h1>\n      {children}\n    </section>\n  )\n}\n\nfunction Button({ children }) {\n  const theme = useContext(ThemeContext);\n  const className = 'button-' + theme;\n  return (\n    <button className={className}>\n      {children}\n    </button>\n  );\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),".panel-light,\n.panel-dark {\n  border: 1px solid black;\n  border-radius: 4px;\n  padding: 20px;\n  margin-bottom: 10px;\n}\n.panel-light {\n  color: #222;\n  background: #fff;\n}\n\n.panel-dark {\n  color: #fff;\n  background: rgb(23, 32, 42);\n}\n\n.button-light,\n.button-dark {\n  border: 1px solid #777;\n  padding: 5px;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n\n.button-dark {\n  background: #222;\n  color: #fff;\n}\n\n.button-light {\n  background: #fff;\n  color: #222;\n}\n"))),(0,a.kt)("p",null,"Note that ",(0,a.kt)("inlineCode",{parentName:"p"},'value="dark"')," passes the ",(0,a.kt)("inlineCode",{parentName:"p"},'"dark"')," string, but ",(0,a.kt)("inlineCode",{parentName:"p"},"value={theme}")," passes the value of the JavaScript ",(0,a.kt)("inlineCode",{parentName:"p"},"theme")," variable with ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/learn/javascript-in-jsx-with-curly-braces"}),"JSX curly braces"),". Curly braces also let you pass context values that aren\u2019t strings."),(0,a.kt)(d,{mdxType:"Solution"}),(0,a.kt)("h3",Object.assign({},{id:"updating-an-object-via-context"}),"Updating an object via context"),(0,a.kt)("p",null,"In this example, there is a ",(0,a.kt)("inlineCode",{parentName:"p"},"currentUser")," state variable which holds an object. You combine ",(0,a.kt)("inlineCode",{parentName:"p"},"{ currentUser, setCurrentUser }")," into a single object and pass it down through the context inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"value={}"),". This lets any component below, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"LoginButton"),", read both ",(0,a.kt)("inlineCode",{parentName:"p"},"currentUser")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"setCurrentUser"),", and then call ",(0,a.kt)("inlineCode",{parentName:"p"},"setCurrentUser")," when needed."),(0,a.kt)(p,{mdxType:"Sandpack"},(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'import { createContext, useContext, useState } from \'react\';\n\nconst CurrentUserContext = createContext(null);\n\nexport default function MyApp() {\n  const [currentUser, setCurrentUser] = useState(null);\n  return (\n    <CurrentUserContext.Provider\n      value={{\n        currentUser,\n        setCurrentUser\n      }}\n    >\n      <Form />\n    </CurrentUserContext.Provider>\n  );\n}\n\nfunction Form({ children }) {\n  return (\n    <Panel title="Welcome">\n      <LoginButton />\n    </Panel>\n  );\n}\n\nfunction LoginButton() {\n  const {\n    currentUser,\n    setCurrentUser\n  } = useContext(CurrentUserContext);\n\n  if (currentUser !== null) {\n    return <p>You logged in as {currentUser.name}.</p>;\n  }\n\n  return (\n    <Button onClick={() => {\n      setCurrentUser({ name: \'Advika\' })\n    }}>Log in as Advika</Button>\n  );\n}\n\nfunction Panel({ title, children }) {\n  return (\n    <section className="panel">\n      <h1>{title}</h1>\n      {children}\n    </section>\n  )\n}\n\nfunction Button({ children, onClick }) {\n  return (\n    <button className="button" onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"label {\n  display: block;\n}\n\n.panel {\n  border: 1px solid black;\n  border-radius: 4px;\n  padding: 20px;\n  margin-bottom: 10px;\n}\n\n.button {\n  border: 1px solid #777;\n  padding: 5px;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n"))),(0,a.kt)(d,{mdxType:"Solution"}),(0,a.kt)("h3",Object.assign({},{id:"multiple-contexts"}),"Multiple contexts"),(0,a.kt)("p",null,"In this example, there are two independent contexts. ",(0,a.kt)("inlineCode",{parentName:"p"},"ThemeContext")," provides the current theme, which is a string, while ",(0,a.kt)("inlineCode",{parentName:"p"},"CurrentUserContext")," holds the object representing the current user."),(0,a.kt)(p,{mdxType:"Sandpack"},(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { createContext, useContext, useState } from 'react';\n\nconst ThemeContext = createContext(null);\nconst CurrentUserContext = createContext(null);\n\nexport default function MyApp() {\n  const [theme, setTheme] = useState('light');\n  const [currentUser, setCurrentUser] = useState(null);\n  return (\n    <ThemeContext.Provider value={theme}>\n      <CurrentUserContext.Provider\n        value={{\n          currentUser,\n          setCurrentUser\n        }}\n      >\n        <WelcomePanel />\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={theme === 'dark'}\n            onChange={(e) => {\n              setTheme(e.target.checked ? 'dark' : 'light')\n            }}\n          />\n          Use dark mode\n        </label>\n      </CurrentUserContext.Provider>\n    </ThemeContext.Provider>\n  )\n}\n\nfunction WelcomePanel({ children }) {\n  const {currentUser} = useContext(CurrentUserContext);\n  return (\n    <Panel title=\"Welcome\">\n      {currentUser !== null ?\n        <Greeting /> :\n        <LoginForm />\n      }\n    </Panel>\n  );\n}\n\nfunction Greeting() {\n  const {currentUser} = useContext(CurrentUserContext);\n  return (\n    <p>You logged in as {currentUser.name}.</p>\n  )\n}\n\nfunction LoginForm() {\n  const {setCurrentUser} = useContext(CurrentUserContext);\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const canLogin = firstName !== '' && lastName !== '';\n  return (\n    <>\n      <label>\n        First name{': '}\n        <input\n          required\n          value={firstName}\n          onChange={e => setFirstName(e.target.value)}\n        />\n      </label>\n      <label>\n        Last name{': '}\n        <input\n        required\n          value={lastName}\n          onChange={e => setLastName(e.target.value)}\n        />\n      </label>\n      <Button\n        disabled={!canLogin}\n        onClick={() => {\n          setCurrentUser({\n            name: firstName + ' ' + lastName\n          });\n        }}\n      >\n        Log in\n      </Button>\n      {!canLogin && <i>Fill in both fields.</i>}\n    </>\n  );\n}\n\nfunction Panel({ title, children }) {\n  const theme = useContext(ThemeContext);\n  const className = 'panel-' + theme;\n  return (\n    <section className={className}>\n      <h1>{title}</h1>\n      {children}\n    </section>\n  )\n}\n\nfunction Button({ children, disabled, onClick }) {\n  const theme = useContext(ThemeContext);\n  const className = 'button-' + theme;\n  return (\n    <button\n      className={className}\n      disabled={disabled}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"label {\n  display: block;\n}\n\n.panel-light,\n.panel-dark {\n  border: 1px solid black;\n  border-radius: 4px;\n  padding: 20px;\n  margin-bottom: 10px;\n}\n.panel-light {\n  color: #222;\n  background: #fff;\n}\n\n.panel-dark {\n  color: #fff;\n  background: rgb(23, 32, 42);\n}\n\n.button-light,\n.button-dark {\n  border: 1px solid #777;\n  padding: 5px;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n\n.button-dark {\n  background: #222;\n  color: #fff;\n}\n\n.button-light {\n  background: #fff;\n  color: #222;\n}\n"))),(0,a.kt)(d,{mdxType:"Solution"}),(0,a.kt)("h3",Object.assign({},{id:"extracting-providers-to-a-component"}),"Extracting providers to a component"),(0,a.kt)("p",null,"As your app grows, it is expected that you\u2019ll have a \u201cpyramid\u201d of contexts closer to the root of your app. There is nothing wrong with that. However, if you dislike the nesting aesthetically, you can extract the providers into a single component. In this example, ",(0,a.kt)("inlineCode",{parentName:"p"},"MyProviders")," hides the \u201cplumbing\u201d and renders the children passed to it inside the necessary providers. Note that the ",(0,a.kt)("inlineCode",{parentName:"p"},"theme")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"setTheme")," state is needed in ",(0,a.kt)("inlineCode",{parentName:"p"},"MyApp")," itself, so ",(0,a.kt)("inlineCode",{parentName:"p"},"MyApp")," still owns that piece of the state."),(0,a.kt)(p,{mdxType:"Sandpack"},(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { createContext, useContext, useState } from 'react';\n\nconst ThemeContext = createContext(null);\nconst CurrentUserContext = createContext(null);\n\nexport default function MyApp() {\n  const [theme, setTheme] = useState('light');\n  return (\n    <MyProviders theme={theme} setTheme={setTheme}>\n      <WelcomePanel />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={theme === 'dark'}\n          onChange={(e) => {\n            setTheme(e.target.checked ? 'dark' : 'light')\n          }}\n        />\n        Use dark mode\n      </label>\n    </MyProviders>\n  );\n}\n\nfunction MyProviders({ children, theme, setTheme }) {\n  const [currentUser, setCurrentUser] = useState(null);\n  return (\n    <ThemeContext.Provider value={theme}>\n      <CurrentUserContext.Provider\n        value={{\n          currentUser,\n          setCurrentUser\n        }}\n      >\n        {children}\n      </CurrentUserContext.Provider>\n    </ThemeContext.Provider>\n  );\n}\n\nfunction WelcomePanel({ children }) {\n  const {currentUser} = useContext(CurrentUserContext);\n  return (\n    <Panel title=\"Welcome\">\n      {currentUser !== null ?\n        <Greeting /> :\n        <LoginForm />\n      }\n    </Panel>\n  );\n}\n\nfunction Greeting() {\n  const {currentUser} = useContext(CurrentUserContext);\n  return (\n    <p>You logged in as {currentUser.name}.</p>\n  )\n}\n\nfunction LoginForm() {\n  const {setCurrentUser} = useContext(CurrentUserContext);\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const canLogin = firstName !== '' && lastName !== '';\n  return (\n    <>\n      <label>\n        First name{': '}\n        <input\n          required\n          value={firstName}\n          onChange={e => setFirstName(e.target.value)}\n        />\n      </label>\n      <label>\n        Last name{': '}\n        <input\n        required\n          value={lastName}\n          onChange={e => setLastName(e.target.value)}\n        />\n      </label>\n      <Button\n        disabled={!canLogin}\n        onClick={() => {\n          setCurrentUser({\n            name: firstName + ' ' + lastName\n          });\n        }}\n      >\n        Log in\n      </Button>\n      {!canLogin && <i>Fill in both fields.</i>}\n    </>\n  );\n}\n\nfunction Panel({ title, children }) {\n  const theme = useContext(ThemeContext);\n  const className = 'panel-' + theme;\n  return (\n    <section className={className}>\n      <h1>{title}</h1>\n      {children}\n    </section>\n  )\n}\n\nfunction Button({ children, disabled, onClick }) {\n  const theme = useContext(ThemeContext);\n  const className = 'button-' + theme;\n  return (\n    <button\n      className={className}\n      disabled={disabled}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"label {\n  display: block;\n}\n\n.panel-light,\n.panel-dark {\n  border: 1px solid black;\n  border-radius: 4px;\n  padding: 20px;\n  margin-bottom: 10px;\n}\n.panel-light {\n  color: #222;\n  background: #fff;\n}\n\n.panel-dark {\n  color: #fff;\n  background: rgb(23, 32, 42);\n}\n\n.button-light,\n.button-dark {\n  border: 1px solid #777;\n  padding: 5px;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n\n.button-dark {\n  background: #222;\n  color: #fff;\n}\n\n.button-light {\n  background: #fff;\n  color: #222;\n}\n"))),(0,a.kt)(d,{mdxType:"Solution"}),(0,a.kt)("h3",Object.assign({},{id:"scaling-up-with-context-and-a-reducer"}),"Scaling up with context and a reducer"),(0,a.kt)("p",null,"In larger apps, it is common to combine context with a ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/apis/usereducer"}),"reducer")," to extract the logic related to some state out of components. In this example, all the \u201cwiring\u201d is hidden in the ",(0,a.kt)("inlineCode",{parentName:"p"},"TasksContext.js"),", which contains a reducer and two separate contexts."),(0,a.kt)("p",null,"Read a ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/learn/scaling-up-with-reducer-and-context"}),"full walkthrough")," of this example."),(0,a.kt)(p,{mdxType:"Sandpack"},(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"App.js","App.js":!0}),"import AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\nimport { TasksProvider } from './TasksContext.js';\n\nexport default function TaskApp() {\n  return (\n    <TasksProvider>\n      <h1>Day off in Kyoto</h1>\n      <AddTask />\n      <TaskList />\n    </TasksProvider>\n  );\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"TasksContext.js","TasksContext.js":!0}),"import { createContext, useContext, useReducer } from 'react';\n\nconst TasksContext = createContext(null);\n\nconst TasksDispatchContext = createContext(null);\n\nexport function TasksProvider({ children }) {\n  const [tasks, dispatch] = useReducer(\n    tasksReducer,\n    initialTasks\n  );\n\n  return (\n    <TasksContext.Provider value={tasks}>\n      <TasksDispatchContext.Provider value={dispatch}>\n        {children}\n      </TasksDispatchContext.Provider>\n    </TasksContext.Provider>\n  );\n}\n\nexport function useTasks() {\n  return useContext(TasksContext);\n}\n\nexport function useTasksDispatch() {\n  return useContext(TasksDispatchContext);\n}\n\nfunction tasksReducer(tasks, action) {\n  switch (action.type) {\n    case 'added': {\n      return [...tasks, {\n        id: action.id,\n        text: action.text,\n        done: false\n      }];\n    }\n    case 'changed': {\n      return tasks.map(t => {\n        if (t.id === action.task.id) {\n          return action.task;\n        } else {\n          return t;\n        }\n      });\n    }\n    case 'deleted': {\n      return tasks.filter(t => t.id !== action.id);\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}\n\nconst initialTasks = [\n  { id: 0, text: 'Philosopher\u2019s Path', done: true },\n  { id: 1, text: 'Visit the temple', done: false },\n  { id: 2, text: 'Drink matcha', done: false }\n];\n")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"AddTask.js","AddTask.js":!0}),"import { useState, useContext } from 'react';\nimport { useTasksDispatch } from './TasksContext.js';\n\nexport default function AddTask({ onAddTask }) {\n  const [text, setText] = useState('');\n  const dispatch = useTasksDispatch();\n  return (\n    <>\n      <input\n        placeholder=\"Add task\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <button onClick={() => {\n        setText('');\n        dispatch({\n          type: 'added',\n          id: nextId++,\n          text: text,\n        }); \n      }}>Add</button>\n    </>\n  );\n}\n\nlet nextId = 3;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"TaskList.js","TaskList.js":!0}),"import { useState, useContext } from 'react';\nimport { useTasks, useTasksDispatch } from './TasksContext.js';\n\nexport default function TaskList() {\n  const tasks = useTasks();\n  return (\n    <ul>\n      {tasks.map(task => (\n        <li key={task.id}>\n          <Task task={task} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction Task({ task }) {\n  const [isEditing, setIsEditing] = useState(false);\n  const dispatch = useTasksDispatch();\n  let taskContent;\n  if (isEditing) {\n    taskContent = (\n      <>\n        <input\n          value={task.text}\n          onChange={e => {\n            dispatch({\n              type: 'changed',\n              task: {\n                ...task,\n                text: e.target.value\n              }\n            });\n          }} />\n        <button onClick={() => setIsEditing(false)}>\n          Save\n        </button>\n      </>\n    );\n  } else {\n    taskContent = (\n      <>\n        {task.text}\n        <button onClick={() => setIsEditing(true)}>\n          Edit\n        </button>\n      </>\n    );\n  }\n  return (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={task.done}\n        onChange={e => {\n          dispatch({\n            type: 'changed',\n            task: {\n              ...task,\n              done: e.target.checked\n            }\n          });\n        }}\n      />\n      {taskContent}\n      <button onClick={() => {\n        dispatch({\n          type: 'deleted',\n          id: task.id\n        });\n      }}>\n        Delete\n      </button>\n    </label>\n  );\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"button { margin: 5px; }\nli { list-style-type: none; }\nul, li { margin: 0; padding: 0; }\n"))),(0,a.kt)(d,{mdxType:"Solution"})),(0,a.kt)("hr",null),(0,a.kt)("h3",Object.assign({},{id:"specifying-a-fallback-default-value"}),"Specifying a fallback default value"),(0,a.kt)("p",null,"If React can\u2019t find any providers of that particular ",(0,a.kt)(l,{step:1,mdxType:"CodeStep"},"context")," in the parent tree, the context value returned by ",(0,a.kt)("inlineCode",{parentName:"p"},"useContext()")," will be equal to the ",(0,a.kt)(l,{step:3,mdxType:"CodeStep"},"default value")," that you specified when you ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/api/createcontext"}),"created that context"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:'[[1, 1, "ThemeContext"], [3, 1, "null"]]',"[[1,":!0,"1,":!0,'"ThemeContext"],':!0,"[3,":!0,'"null"]]':!0}),"const ThemeContext = createContext(null);\n")),(0,a.kt)("p",null,"The default value ",(0,a.kt)("strong",{parentName:"p"},"never changes"),". If you want to update context, use it with state as ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"#updating-data-passed-via-context"}),"described above"),"."),(0,a.kt)("p",null,"Often, instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),", there is some more meaningful value you can use as a default, for example:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:'[[1, 1, "ThemeContext"], [3, 1, "light"]]',"[[1,":!0,"1,":!0,'"ThemeContext"],':!0,"[3,":!0,'"light"]]':!0}),"const ThemeContext = createContext('light');\n")),(0,a.kt)("p",null,"This way, if you accidentally render some component without a corresponding provider, it won\u2019t break. This also helps your components work well in a test environment without setting up a lot of providers in the tests."),(0,a.kt)("p",null,"In the example below, the \u201cToggle theme\u201d button is always light because it\u2019s ",(0,a.kt)("strong",{parentName:"p"},"outside any theme context provider")," and the default context theme value is ",(0,a.kt)("inlineCode",{parentName:"p"},"'light'"),". Try editing the default theme to be ",(0,a.kt)("inlineCode",{parentName:"p"},"'dark'"),"."),(0,a.kt)(p,{mdxType:"Sandpack"},(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { createContext, useContext, useState } from 'react';\n\nconst ThemeContext = createContext('light');\n\nexport default function MyApp() {\n  const [theme, setTheme] = useState('light');\n  return (\n    <>\n      <ThemeContext.Provider value={theme}>\n        <Form />\n      </ThemeContext.Provider>\n      <Button onClick={() => {\n        setTheme(theme === 'dark' ? 'light' : 'dark');\n      }}>\n        Toggle theme\n      </Button>\n    </>\n  )\n}\n\nfunction Form({ children }) {\n  return (\n    <Panel title=\"Welcome\">\n      <Button>Sign up</Button>\n      <Button>Log in</Button>\n    </Panel>\n  );\n}\n\nfunction Panel({ title, children }) {\n  const theme = useContext(ThemeContext);\n  const className = 'panel-' + theme;\n  return (\n    <section className={className}>\n      <h1>{title}</h1>\n      {children}\n    </section>\n  )\n}\n\nfunction Button({ children, onClick }) {\n  const theme = useContext(ThemeContext);\n  const className = 'button-' + theme;\n  return (\n    <button className={className} onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),".panel-light,\n.panel-dark {\n  border: 1px solid black;\n  border-radius: 4px;\n  padding: 20px;\n  margin-bottom: 10px;\n}\n.panel-light {\n  color: #222;\n  background: #fff;\n}\n\n.panel-dark {\n  color: #fff;\n  background: rgb(23, 32, 42);\n}\n\n.button-light,\n.button-dark {\n  border: 1px solid #777;\n  padding: 5px;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n\n.button-dark {\n  background: #222;\n  color: #fff;\n}\n\n.button-light {\n  background: #fff;\n  color: #222;\n}\n"))),(0,a.kt)("hr",null),(0,a.kt)("h3",Object.assign({},{id:"overriding-context-for-a-part-of-the-tree"}),"Overriding context for a part of the tree"),(0,a.kt)("p",null,"You can override the context for a part of the tree by wrapping that part in a provider with a different value."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"{3,5}","{3,5}":!0}),'<ThemeContext.Provider value="dark">\n  ...\n  <ThemeContext.Provider value="light">\n    <Footer />\n  </ThemeContext.Provider>\n  ...\n</ThemeContext.Provider>\n')),(0,a.kt)("p",null,"You can nest and override providers as many times as you need."),(0,a.kt)(u,{title:"Examples of overriding context",mdxType:"Recipes"},(0,a.kt)("h3",Object.assign({},{id:"overriding-a-theme"}),"Overriding a theme"),(0,a.kt)("p",null,"Here, the button ",(0,a.kt)("em",{parentName:"p"},"inside")," the ",(0,a.kt)("inlineCode",{parentName:"p"},"Footer")," receives a different context value (",(0,a.kt)("inlineCode",{parentName:"p"},'"light"'),") than the buttons outside (",(0,a.kt)("inlineCode",{parentName:"p"},'"dark"'),")."),(0,a.kt)(p,{mdxType:"Sandpack"},(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { createContext, useContext } from 'react';\n\nconst ThemeContext = createContext(null);\n\nexport default function MyApp() {\n  return (\n    <ThemeContext.Provider value=\"dark\">\n      <Form />\n    </ThemeContext.Provider>\n  )\n}\n\nfunction Form() {\n  return (\n    <Panel title=\"Welcome\">\n      <Button>Sign up</Button>\n      <Button>Log in</Button>\n      <ThemeContext.Provider value=\"light\">\n        <Footer />\n      </ThemeContext.Provider>\n    </Panel>\n  );\n}\n\nfunction Footer() {\n  return (\n    <footer>\n      <Button>Settings</Button>\n    </footer>\n  );\n}\n\nfunction Panel({ title, children }) {\n  const theme = useContext(ThemeContext);\n  const className = 'panel-' + theme;\n  return (\n    <section className={className}>\n      {title && <h1>{title}</h1>}\n      {children}\n    </section>\n  )\n}\n\nfunction Button({ children }) {\n  const theme = useContext(ThemeContext);\n  const className = 'button-' + theme;\n  return (\n    <button className={className}>\n      {children}\n    </button>\n  );\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"footer {\n  margin-top: 20px;\n  border-top: 1px solid #aaa;\n}\n\n.panel-light,\n.panel-dark {\n  border: 1px solid black;\n  border-radius: 4px;\n  padding: 20px;\n}\n.panel-light {\n  color: #222;\n  background: #fff;\n}\n\n.panel-dark {\n  color: #fff;\n  background: rgb(23, 32, 42);\n}\n\n.button-light,\n.button-dark {\n  border: 1px solid #777;\n  padding: 5px;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n\n.button-dark {\n  background: #222;\n  color: #fff;\n}\n\n.button-light {\n  background: #fff;\n  color: #222;\n}\n"))),(0,a.kt)(d,{mdxType:"Solution"}),(0,a.kt)("h3",Object.assign({},{id:"automatically-nested-headings"}),"Automatically nested headings"),(0,a.kt)("p",null,"You can \u201caccumulate\u201d information when you nest context providers. In this example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Section")," component keeps track of the ",(0,a.kt)("inlineCode",{parentName:"p"},"LevelContext")," which specifies the depth of the section nesting. It reads the ",(0,a.kt)("inlineCode",{parentName:"p"},"LevelContext")," from the parent section, and provides the ",(0,a.kt)("inlineCode",{parentName:"p"},"LevelContext")," number increased by one to its children. As a result, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Heading")," component can automatically decide which of the ",(0,a.kt)("inlineCode",{parentName:"p"},"<h1>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"<h2>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"<h3>"),", \u2026, tags to use based on how many ",(0,a.kt)("inlineCode",{parentName:"p"},"Section")," components it is nested inside of."),(0,a.kt)("p",null,"Read a ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/learn/passing-data-deeply-with-context"}),"detailed walkthrough")," of this example."),(0,a.kt)(p,{mdxType:"Sandpack"},(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import Heading from './Heading.js';\nimport Section from './Section.js';\n\nexport default function Page() {\n  return (\n    <Section>\n      <Heading>Title</Heading>\n      <Section>\n        <Heading>Heading</Heading>\n        <Heading>Heading</Heading>\n        <Heading>Heading</Heading>\n        <Section>\n          <Heading>Sub-heading</Heading>\n          <Heading>Sub-heading</Heading>\n          <Heading>Sub-heading</Heading>\n          <Section>\n            <Heading>Sub-sub-heading</Heading>\n            <Heading>Sub-sub-heading</Heading>\n            <Heading>Sub-sub-heading</Heading>\n          </Section>\n        </Section>\n      </Section>\n    </Section>\n  );\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"Section.js","Section.js":!0}),"import { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Section({ children }) {\n  const level = useContext(LevelContext);\n  return (\n    <section className=\"section\">\n      <LevelContext.Provider value={level + 1}>\n        {children}\n      </LevelContext.Provider>\n    </section>\n  );\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"Heading.js","Heading.js":!0}),"import { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Heading({ children }) {\n  const level = useContext(LevelContext);\n  switch (level) {\n    case 0:\n      throw Error('Heading must be inside a Section!');\n    case 1:\n      return <h1>{children}</h1>;\n    case 2:\n      return <h2>{children}</h2>;\n    case 3:\n      return <h3>{children}</h3>;\n    case 4:\n      return <h4>{children}</h4>;\n    case 5:\n      return <h5>{children}</h5>;\n    case 6:\n      return <h6>{children}</h6>;\n    default:\n      throw Error('Unknown level: ' + level);\n  }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"LevelContext.js","LevelContext.js":!0}),"import { createContext } from 'react';\n\nexport const LevelContext = createContext(0);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),".section {\n  padding: 10px;\n  margin: 5px;\n  border-radius: 5px;\n  border: 1px solid #aaa;\n}\n"))),(0,a.kt)(d,{mdxType:"Solution"})),(0,a.kt)("hr",null),(0,a.kt)("h3",Object.assign({},{id:"optimizing-re-renders-when-passing-objects-and-functions"}),"Optimizing re-renders when passing objects and functions"),(0,a.kt)("p",null,"You can pass any values via context, including objects and functions."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:'[[2, 10, "{ currentUser, login }"]]',"[[2,":!0,"10,":!0,'"{':!0,"currentUser,":!0,login:!0,'}"]]':!0}),"function MyApp() {\n  const [currentUser, setCurrentUser] = useState(null);\n\n  function login(response) {\n    storeCredentials(response.credentials);\n    setCurrentUser(response.user);\n  }\n\n  return (\n    <AuthContext.Provider value={{ currentUser, login }}>\n      <Page />\n    </AuthContext.Provider>\n  );\n}\n")),(0,a.kt)("p",null,"Here, the ",(0,a.kt)(l,{step:2,mdxType:"CodeStep"},"context value")," is a JavaScript object with two properties, one of which is a function. Whenever ",(0,a.kt)("inlineCode",{parentName:"p"},"MyApp")," re-renders (for example, on a route update), this will be a ",(0,a.kt)("em",{parentName:"p"},"different")," object pointing at a ",(0,a.kt)("em",{parentName:"p"},"different")," function, so React will also have to re-render all components deep in the tree that call ",(0,a.kt)("inlineCode",{parentName:"p"},"useContext(AuthContext)"),"."),(0,a.kt)("p",null,"In smaller apps, this is not a problem. However, there is no need to re-render them if the underlying data, like ",(0,a.kt)("inlineCode",{parentName:"p"},"currentUser"),", has not changed. To help React take advantage of that fact, you may wrap the ",(0,a.kt)("inlineCode",{parentName:"p"},"login")," function with ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/apis/usecallback"}),(0,a.kt)("inlineCode",{parentName:"a"},"useCallback"))," and wrap the object creation into ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/apis/usememo"}),(0,a.kt)("inlineCode",{parentName:"a"},"useMemo")),". This is a performance optimization:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"{1,6-9,11-14}","{1,6-9,11-14}":!0}),"import { useCallback, useMemo } from 'react';\n\nfunction MyApp() {\n  const [currentUser, setCurrentUser] = useState(null);\n\n  const login = useCallback((response) => {\n    storeCredentials(response.credentials);\n    setCurrentUser(response.user);\n  }, []);\n\n  const contextValue = useMemo(() => ({\n    currentUser,\n    login\n  }), [currentUser, login]);\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      <Page />\n    </AuthContext.Provider>\n  );\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"login")," function does not use any information from the render scope, so you can specify an empty array of dependencies. The ",(0,a.kt)("inlineCode",{parentName:"p"},"contextValue")," object consists of ",(0,a.kt)("inlineCode",{parentName:"p"},"currentUser")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"login"),", so it needs to list both as dependencies. As a result of this change, the components calling ",(0,a.kt)("inlineCode",{parentName:"p"},"useContext(AuthProvider)")," won\u2019t need to re-render unless ",(0,a.kt)("inlineCode",{parentName:"p"},"currentUser")," changes. Read more about ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"TODO"}),"skipping re-renders with memoization"),"."),(0,a.kt)("hr",null),(0,a.kt)("h2",Object.assign({},{id:"reference"}),"Reference"),(0,a.kt)("h3",Object.assign({},{id:"usecontext"}),(0,a.kt)("inlineCode",{parentName:"h3"},"useContext(SomeContext)"),""),(0,a.kt)("p",null,"Call ",(0,a.kt)("inlineCode",{parentName:"p"},"useContext")," at the top level of your component to read and subscribe to ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/learn/passing-data-deeply-with-context"}),"context"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { useContext } from 'react';\n\nfunction MyComponent() {\n  const theme = useTheme(ThemeContext);\n  // ...\n")),(0,a.kt)("p",null,(0,a.kt)("a",Object.assign({parentName:"p"},{href:"#examples-basic"}),"See more examples above.")),(0,a.kt)("h4",Object.assign({},{id:"parameters"}),"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SomeContext"),": The context that you\u2019ve previously created with ",(0,a.kt)("a",Object.assign({parentName:"li"},{href:"/api/createcontext"}),(0,a.kt)("inlineCode",{parentName:"a"},"createContext")),". The context itself does not hold the information, it only represents the kind of information you can provide or read from components.")),(0,a.kt)("h4",Object.assign({},{id:"returns"}),"Returns"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useContext")," returns the context value for the calling component. It is determined as the ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," passed to the closest ",(0,a.kt)("inlineCode",{parentName:"p"},"SomeContext.Provider")," above the calling component in the tree. If there is no such provider, then the returned value will be the ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultValue")," you have passed to ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/api/createcontext"}),(0,a.kt)("inlineCode",{parentName:"a"},"createContext"))," for that context. The returned value is always up-to-date. React automatically re-renders components that read some context if it changes."),(0,a.kt)("h4",Object.assign({},{id:"caveats"}),"Caveats"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"useContext()")," call in a component is not affected by providers returned from the ",(0,a.kt)("em",{parentName:"li"},"same")," component. The corresponding ",(0,a.kt)("inlineCode",{parentName:"li"},"<Context.Provider>")," ",(0,a.kt)("strong",{parentName:"li"},"needs to be ",(0,a.kt)("em",{parentName:"strong"},"above"))," the component doing the ",(0,a.kt)("inlineCode",{parentName:"li"},"useContext()")," call."),(0,a.kt)("li",{parentName:"ul"},"React ",(0,a.kt)("strong",{parentName:"li"},"automatically re-renders")," all the children that use a particular context starting from the provider that receives a different ",(0,a.kt)("inlineCode",{parentName:"li"},"value"),". The previous and the next values are compared with the ",(0,a.kt)("a",Object.assign({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is",target:"_blank",rel:"nofollow noopener noreferrer"}),(0,a.kt)("inlineCode",{parentName:"a"},"Object.is"))," comparison. Skipping re-renders with ",(0,a.kt)("a",Object.assign({parentName:"li"},{href:"/apis/memo"}),(0,a.kt)("inlineCode",{parentName:"a"},"memo"))," does not prevent the children receiving fresh context values from above."),(0,a.kt)("li",{parentName:"ul"},"If your build system produces duplicates modules in the output (which can happen if you use symlinks), this can break context. Passing something via context only works if ",(0,a.kt)("inlineCode",{parentName:"li"},"SomeContext")," that you use to provide context and ",(0,a.kt)("inlineCode",{parentName:"li"},"SomeContext")," that you use to read it are ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"exactly")," the same object"),", as determined by a ",(0,a.kt)("inlineCode",{parentName:"li"},"===")," comparison.")),(0,a.kt)("hr",null),(0,a.kt)("h2",Object.assign({},{id:"troubleshooting"}),"Troubleshooting"),(0,a.kt)("h3",Object.assign({},{id:"my-component-doesnt-see-the-value-from-my-provider"}),"My component doesn\u2019t see the value from my provider"),(0,a.kt)("p",null,"There are a few common ways that this can happen:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"You\u2019re rendering ",(0,a.kt)("inlineCode",{parentName:"li"},"<SomeContext.Provider>")," in the same component (or below) as where you\u2019re calling ",(0,a.kt)("inlineCode",{parentName:"li"},"useContext()"),". Move ",(0,a.kt)("inlineCode",{parentName:"li"},"<SomeContext.Provider>")," ",(0,a.kt)("em",{parentName:"li"},"above and outside")," the component calling ",(0,a.kt)("inlineCode",{parentName:"li"},"useContext()"),"."),(0,a.kt)("li",{parentName:"ol"},"You may have forgotten to wrap your component with ",(0,a.kt)("inlineCode",{parentName:"li"},"<SomeContext.Provider>"),", or you might have put it in a different part of the tree than you thought. Check whether the hierarchy is right using ",(0,a.kt)("a",Object.assign({parentName:"li"},{href:"/learn/react-developer-tools"}),"React DevTools"),"."),(0,a.kt)("li",{parentName:"ol"},"You might be running into some build issue with your tooling that causes ",(0,a.kt)("inlineCode",{parentName:"li"},"SomeContext")," as seen from the providing component and ",(0,a.kt)("inlineCode",{parentName:"li"},"SomeContext")," as seen by the reading component to be two different objects. This can happen if you use symlinks, for example. You can verify this by assigning them to globals like ",(0,a.kt)("inlineCode",{parentName:"li"},"window.SomeContext1")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"window.SomeContext2")," and then checking whether ",(0,a.kt)("inlineCode",{parentName:"li"},"window.SomeContext1 === window.SomeContext2")," in the console. If they\u2019re not the same, you need to fix that issue on the build tool level.")),(0,a.kt)("h3",Object.assign({},{id:"i-am-always-getting-undefined-from-my-context-although-the-default-value-is-different"}),"I am always getting ",(0,a.kt)("inlineCode",{parentName:"h3"},"undefined")," from my context although the default value is different"),(0,a.kt)("p",null,"You might have a provider without a ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," in the tree:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"{1,2}","{1,2}":!0}),"// \ud83d\udea9 Doesn't work: no value prop\n<ThemeContext.Provider>\n   <Button />\n</ThemeContext.Provider>\n")),(0,a.kt)("p",null,"If you forget to specify ",(0,a.kt)("inlineCode",{parentName:"p"},"value"),", it\u2019s like passing ",(0,a.kt)("inlineCode",{parentName:"p"},"value={undefined}"),"."),(0,a.kt)("p",null,"You may have also mistakingly used a different prop name by mistake:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"{1,2}","{1,2}":!0}),'// \ud83d\udea9 Doesn\'t work: prop should be called "value"\n<ThemeContext.Provider theme={theme}>\n   <Button />\n</ThemeContext.Provider>\n')),(0,a.kt)("p",null,"In both of these cases you should see a warning from React in the console. To fix them, call the prop ",(0,a.kt)("inlineCode",{parentName:"p"},"value"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"{1,2}","{1,2}":!0}),"// \u2705 Passing the value prop\n<ThemeContext.Provider value={theme}>\n   <Button />\n</ThemeContext.Provider>\n")),(0,a.kt)("p",null,"Note that the ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"#specifying-a-fallback-default-value"}),"default value from your ",(0,a.kt)("inlineCode",{parentName:"a"},"createContext(defaultValue)")," call")," is only used ",(0,a.kt)("strong",{parentName:"p"},"if there is no matching provider above at all.")," If there is a ",(0,a.kt)("inlineCode",{parentName:"p"},"<SomeContext.Provider value={undefined}>")," component somewhere in the parent tree, the component calling ",(0,a.kt)("inlineCode",{parentName:"p"},"useContext(SomeContext)")," ",(0,a.kt)("em",{parentName:"p"},"will")," receive ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," as the context value."))}k.isMDXComponent=!0}},function(e){e.O(0,[774,763,829,888,179],(function(){return n=1138,e(e.s=n);var n}));var n=e.O();_N_E=n}]);