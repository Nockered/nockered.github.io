(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[400],{4367:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/apis/render",function(){return n(9114)}])},9027:function(e,t,n){"use strict";n.d(t,{Z:function(){return s}});var a=n(5893),r=(n(7294),n(1387)),o=n(8546),i=n(9557);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"===typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){l(e,t,n[t])}))}return e}function s(e){var t=function(t){return(0,a.jsx)(o.$,p({},t,{meta:e}))};return t.appShell=d,t}function d(e){return(0,a.jsx)(i.T,p({routeTree:r},e))}},9114:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return c}});n(7294);var a=n(3905),r=n(9027);function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",Object.assign({},t))}},l=i("Intro"),p=i("CodeStep"),s=i("Sandpack"),d={},m=(0,r.Z)({title:"render"});function c(e){var t=e.components,n=o(e,["components"]);return(0,a.kt)(m,Object.assign({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(l,{mdxType:"Intro"},(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"render")," renders a piece of ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/learn/writing-markup-with-jsx"}),"JSX")," (\u201cReact node\u201d) into a browser DOM node."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"render(reactNode, domNode, callback?)\n"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",Object.assign({parentName:"li"},{href:"#usage"}),"Usage"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",Object.assign({parentName:"li"},{href:"#rendering-the-root-component"}),"Rendering the root component")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",Object.assign({parentName:"li"},{href:"#rendering-multiple-roots"}),"Rendering multiple roots")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",Object.assign({parentName:"li"},{href:"#updating-the-rendered-tree"}),"Updating the rendered tree")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",Object.assign({parentName:"li"},{href:"#reference"}),"Reference"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",Object.assign({parentName:"li"},{href:"#render"}),(0,a.kt)("inlineCode",{parentName:"a"},"render(reactNode, domNode, callback?)")))))),(0,a.kt)("hr",null),(0,a.kt)("h2",Object.assign({},{id:"usage"}),"Usage"),(0,a.kt)("p",null,"Call ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," to display a ",(0,a.kt)(p,{step:1,mdxType:"CodeStep"},"React component")," inside a ",(0,a.kt)(p,{step:2,mdxType:"CodeStep"},"browser DOM node"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:'[[1, 4, "<App />"], [2, 4, "document.getElementById(\'root\')"]]',"[[1,":!0,"4,":!0,'"<App':!0,'/>"],':!0,"[2,":!0,"\"document.getElementById('root')\"]]":!0}),"import {render} from 'react-dom';\nimport App from './App.js';\n\nrender(<App />, document.getElementById('root'));\n")),(0,a.kt)("h3",Object.assign({},{id:"rendering-the-root-component"}),"Rendering the root component"),(0,a.kt)("p",null,"In apps fully built with React, ",(0,a.kt)("strong",{parentName:"p"},"you will usually only do this once at startup"),"\u2014to render the \u201croot\u201d component."),(0,a.kt)(s,{mdxType:"Sandpack"},(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"index.js active","index.js":!0,active:!0}),"import './styles.css';\nimport {render} from 'react-dom';\nimport App from './App.js';\n\nrender(<App />, document.getElementById('root'));\n")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"App.js","App.js":!0}),"export default function App() {\n  return <h1>Hello, world!</h1>;\n}\n"))),(0,a.kt)("p",null,"Usually you shouldn\u2019t need to call ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," again or to call it in more places. From this point on, React will be managing the DOM of your application. If you want to update the UI, your components can do this by ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/apis/usestate"}),"using state"),"."),(0,a.kt)("hr",null),(0,a.kt)("h3",Object.assign({},{id:"rendering-multiple-roots"}),"Rendering multiple roots"),(0,a.kt)("p",null,"If your page ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/learn/add-react-to-a-website"}),"isn\u2019t fully built with React"),", call ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," for each top-level piece of UI managed by React."),(0,a.kt)(s,{mdxType:"Sandpack"},(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-html",metastring:"public/index.html","public/index.html":!0}),'<nav id="navigation"></nav>\n<main>\n  <p>This paragraph is not rendered by React (open index.html to verify).</p>\n  <section id="comments"></section>\n</main>\n')),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"index.js active","index.js":!0,active:!0}),"import './styles.css';\nimport { render } from 'react-dom';\nimport { Comments, Navigation } from './Components.js';\n\nrender(\n  <Navigation />,\n  document.getElementById('navigation')\n);\n\nrender(\n  <Comments />,\n  document.getElementById('comments')\n);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"Components.js","Components.js":!0}),'export function Navigation() {\n  return (\n    <ul>\n      <NavLink href="/">Home</NavLink>\n      <NavLink href="/about">About</NavLink>\n    </ul>\n  );\n}\n\nfunction NavLink({ href, children }) {\n  return (\n    <li>\n      <a href={href}>{children}</a>\n    </li>\n  );\n}\n\nexport function Comments() {\n  return (\n    <>\n      <h2>Comments</h2>\n      <Comment text="Hello!" author="Sophie" />\n      <Comment text="How are you?" author="Sunil" />\n    </>\n  );\n}\n\nfunction Comment({ text, author }) {\n  return (\n    <p>{text} \u2014 <i>{author}</i></p>\n  );\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"nav ul { padding: 0; margin: 0; }\nnav ul li { display: inline-block; margin-right: 20px; }\n"))),(0,a.kt)("p",null,"You can destroy the rendered trees with ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"TODO"}),(0,a.kt)("inlineCode",{parentName:"a"},"unmountComponentAtNode()")),"."),(0,a.kt)("hr",null),(0,a.kt)("h3",Object.assign({},{id:"updating-the-rendered-tree"}),"Updating the rendered tree"),(0,a.kt)("p",null,"You can call ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," more than once on the same DOM node. As long as the component tree structure matches up with what was previously rendered, React will ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/learn/preserving-and-resetting-state"}),"preserve the state"),". Notice how you can type in the input, which means that the updates from repeated ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," calls every second in this example are not destructive:"),(0,a.kt)(s,{mdxType:"Sandpack"},(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"index.js active","index.js":!0,active:!0}),"import {render} from 'react-dom';\nimport './styles.css';\nimport App from './App.js';\n\nlet i = 0;\nsetInterval(() => {\n  render(\n    <App counter={i} />,\n    document.getElementById('root')\n  );\n  i++;\n}, 1000);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"App.js","App.js":!0}),'export default function App({counter}) {\n  return (\n    <>\n      <h1>Hello, world! {counter}</h1>\n      <input placeholder="Type something here" />\n    </>\n  );\n}\n'))),(0,a.kt)("p",null,"It is uncommon to call ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," multiple times. Usually, you\u2019ll ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/apis/usestate"}),"update state")," inside one of the components instead."),(0,a.kt)("hr",null),(0,a.kt)("h2",Object.assign({},{id:"reference"}),"Reference"),(0,a.kt)("h3",Object.assign({},{id:"render"}),(0,a.kt)("inlineCode",{parentName:"h3"},"render(reactNode, domNode, callback?)"),""),(0,a.kt)("p",null,"Call ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," to display a React component inside a browser DOM element."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const domNode = document.getElementById('root');\nrender(<App />, domNode);\n")),(0,a.kt)("p",null,"React will display ",(0,a.kt)("inlineCode",{parentName:"p"},"<App />")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"domNode"),", and take over managing the DOM inside it."),(0,a.kt)("p",null,"An app fully built with React will usually only have one ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," call with its root component.  A page that uses \u201csprinkles\u201d of React for parts of the page may have as many ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," calls as needed."),(0,a.kt)("p",null,(0,a.kt)("a",Object.assign({parentName:"p"},{href:"#usage"}),"See examples above.")),(0,a.kt)("h4",Object.assign({},{id:"parameters"}),"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"reactNode"),": A ",(0,a.kt)("em",{parentName:"p"},"React node")," that you want to display. This will usually be a piece of JSX like ",(0,a.kt)("inlineCode",{parentName:"p"},"<App />"),", but you can also pass a React element constructed with ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/TODO"}),(0,a.kt)("inlineCode",{parentName:"a"},"createElement()")),", a string, a number, ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined"),". ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"domNode"),": A ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/Element",target:"_blank",rel:"nofollow noopener noreferrer"}),"DOM element"),". React will display the ",(0,a.kt)("inlineCode",{parentName:"p"},"reactNode")," you pass inside this DOM element. From this moment, React will manage the DOM inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"domNode")," and update it when your React tree changes.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"optional")," ",(0,a.kt)("inlineCode",{parentName:"p"},"callback"),": A function. If passed, React will call it after your component is placed into the DOM."))),(0,a.kt)("h4",Object.assign({},{id:"returns"}),"Returns"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"render")," usually returns ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),". However, if the ",(0,a.kt)("inlineCode",{parentName:"p"},"reactNode")," you pass is a ",(0,a.kt)("em",{parentName:"p"},"class component"),", then it will return an instance of that component."),(0,a.kt)("h4",Object.assign({},{id:"caveats"}),"Caveats"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The first time you call ",(0,a.kt)("inlineCode",{parentName:"p"},"render"),", React will clear all the existing HTML content inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"domNode")," before rendering the React component into it. If your ",(0,a.kt)("inlineCode",{parentName:"p"},"domNode")," contains HTML generated by React on the server or during the build, use ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/TODO"}),(0,a.kt)("inlineCode",{parentName:"a"},"hydrate()"))," instead, which attaches the event handlers to the existing HTML.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If you call ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," on the same ",(0,a.kt)("inlineCode",{parentName:"p"},"domNode")," more than once, React will update the DOM as necessary to reflect the latest JSX you passed. React will decide which parts of the DOM can be reused and which need to be recreated by ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/learn/preserving-and-resetting-state"}),"\u201cmatching it up\u201d")," with the previously rendered tree. Calling ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," on the same ",(0,a.kt)("inlineCode",{parentName:"p"},"domNode")," again is similar to calling the ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/apis/usestate#setstate"}),(0,a.kt)("inlineCode",{parentName:"a"},"set")," function")," on the root component: React avoids unnecessary DOM updates.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If your app is fully built with React, you\u2019ll likely have only one ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," call in your app. (If you use a framework, it might do this call for you.) When you want to render a piece of JSX in a different part of the DOM tree that isn\u2019t a child of your component (for example, a modal or a tooltip), use ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"TODO"}),(0,a.kt)("inlineCode",{parentName:"a"},"createPortal"))," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"render"),"."))),(0,a.kt)("hr",null))}c.isMDXComponent=!0}},function(e){e.O(0,[774,763,829,888,179],(function(){return t=4367,e(e.s=t);var t}));var t=e.O();_N_E=t}]);